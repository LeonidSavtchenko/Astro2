
// Create or clean up the temporary folder
// $s1 - The temporary folder relative path and name
proc createOrCleanUpTempFolder() { local status
    strdef tempFolderRelPathName, tempFolderPathName, sysCommandTempl, sysCommand
    
    tempFolderRelPathName = $s1
    
    sprint(tempFolderPathName, "%s%s", getcwd(), tempFolderRelPathName)
    sysCommandTempl = "if not exist \"%s\" (mkdir \"%s\") else (rmdir /s /q \"%s\" && mkdir \"%s\")"
    sprint(sysCommand, sysCommandTempl, tempFolderPathName, tempFolderPathName, tempFolderPathName, tempFolderPathName)
    
    status = system(sysCommand)
    if (status) {
        printImportFailedMsgAndStop("Cannot create or clean up the temporary folder")
    }
}

// Unzip the archive with 7-Zip and rename the input SWC file
// $s1 - Input ZIP file path and name
// $s2 - Output folder path and name
// $s3 (Output) - The SWC file path and name
proc unzipArchiveWith7ZipAndRenameInputFile() { local status
    strdef inZipFilePathName, appPathNameTempl, appPathName, outFolderPathName, sysCommandTempl, outSwcFileName, sysCommand, outSwcFilePathName
    
    inZipFilePathName = $s1
    outFolderPathName = $s2
    
    // Unzip the selected archive with 7-Zip and save to the temporary folder
    appPathNameTempl = "%sImport/3rdParty/7-Zip/7z.exe"
    sprint(appPathName, appPathNameTempl, getcwd())
    sysCommandTempl = "call \"%s\" e \"%s\" -o\"%s\" > NUL 2> NUL"
    sprint(sysCommand, sysCommandTempl, appPathName, inZipFilePathName, outFolderPathName)
    status = system(sysCommand)
    if (status) {
        printImportFailedMsgAndStop("Cannot unzip the archive with 7-Zip")
    }
    
    // Rename the file *.CNG.swc to input_file.swc
    sysCommandTempl = "cd \"%s\" && ren *.CNG.swc %s 2> NUL"
    outSwcFileName = "input_file.swc"
    sprint(sysCommand, sysCommandTempl, outFolderPathName, outSwcFileName)
    status = system(sysCommand)
    if (status) {
        // Maybe just more than one swc-file in the archive, so only the first one is renamed successfully
        // printImportFailedMsgAndStop("Cannot rename the input SWC file")
    }
    
    sprint(outSwcFilePathName, "%s/%s", outFolderPathName, outSwcFileName)
    $s3 = outSwcFilePathName
}

// Test the selected file with NLMorphologyConverter
// $s1 - Input file path and name
// $s2 - Output report file path and name
proc createReportFileWithNLMorphologyConverter() { local status
    strdef inFilePathName, appPathNameTempl, appPathName, outFilePathName, sysCommandTempl, sysCommand
    
    inFilePathName = $s1
    outFilePathName = $s2
    
    appPathNameTempl = "%sImport/3rdParty/NLMorphologyConverter/NLMorphologyConverter.exe"
    sprint(appPathName, appPathNameTempl, getcwd())
    sysCommandTempl = "call \"%s\" \"%s\" --report \"%s\""
    sprint(sysCommand, sysCommandTempl, appPathName, inFilePathName, outFilePathName)
    
    status = system(sysCommand)
    if (status) {
        // Just for sanity. Actually, NLMorphologyConverter does not return error codes, but rather prints a message
        printImportFailedMsgAndStop("Cannot test the file with NLMorphologyConverter")
    }
}

// Convert the selected file to HOC with NLMorphologyConverter and save to the temporary folder
// $s1 - Input file path and name
// $2 - Soma size chosen by user (in um) or -1 if we won't insert a soma
// $s3 (Output) - The HOC file path and name
proc convertFileToHocWithNLMorphologyConverter() { local somaSizeOrMinusOne, status
    strdef inFilePathName, appPathNameTempl, appPathName, outFilePathNameTempl, outFilePathName, extraArgTempl, extraArg, sysCommandTempl, sysCommand
    
    inFilePathName = $s1
    somaSizeOrMinusOne = $2
    
    appPathNameTempl = "%sImport/3rdParty/NLMorphologyConverter/NLMorphologyConverter.exe"
    sprint(appPathName, appPathNameTempl, getcwd())
    outFilePathNameTempl = "%sImport/temp_folder/last_converted.hoc"
    sprint(outFilePathName, outFilePathNameTempl, getcwd())
    if (somaSizeOrMinusOne != -1) {
        extraArgTempl = "--forceCylinderSoma %g %g"
        sprint(extraArg, extraArgTempl, somaSizeOrMinusOne, somaSizeOrMinusOne)
    } else {
        extraArg = ""
    }
    sysCommandTempl = "call \"%s\" \"%s\" \"%s\" NeuronHOC %s"
    sprint(sysCommand, sysCommandTempl, appPathName, inFilePathName, outFilePathName, extraArg)
    
    status = system(sysCommand)
    if (status) {
        // Just for sanity. Actually, NLMorphologyConverter does not return error codes, but rather prints a message and creates a minimal output file
        printImportFailedMsgAndStop("Cannot convert the file to HOC format with NLMorphologyConverter")
    }
    
    $s3 = outFilePathName
}
