
{ load_file("TopLevelVars.hoc") }
{ load_file("PythonUtils.hoc") }
{ load_file("StringUtils.hoc") }
{ load_file("BatchUtils.hoc") }
{ load_file("CheckUtils.hoc") }
{ load_file("SectionUtils.hoc") }
{ load_file("SectionRefUtils.hoc") }
{ load_file("PreviewUtils.hoc") }
{ load_file("OtherUtils.hoc") }
{ load_file("ImportCompleteWidget.hoc") }
{ load_file("Import_afterChoice.hoc") }     // This one depends on "ImportCompleteWidget.hoc"
{ load_file("OtherWidgets.hoc") }           // This one depends on "Import_afterChoice.hoc"


// Import a file
// $1 - 0/1 flag indicating whether import must be done in "Astro" style
// $s2 - (Optional) HOC command to execute after successful import completion
// $s3 - (Optional) Path to the input file; if omitted, then file browser will be shown
proc importHocOrSwcOrZipOrOtherFile() { local numArg, whetherHocFileNeedsCorrection localobj file
    strdef filePathName, fileExt
    
    if (unix_mac_pc() != 3) {
        printImportFailedMsgAndStop("The importer works only on Windows")
    }
    
    if (!nrnpython("")) {
        printImportFailedMsgAndStop("Python is not available")
    }
    
    numArg = numarg()
    if (numArg < 1 || numArg > 3) {
        printImportFailedMsgAndStop("1, 2 or 3 input arguments expected")
    }
    
    isImportForAstro = $1
    
    if (numArg >= 2) {
        importCompleteHandler = $s2
    } else {
        importCompleteHandler = ""
    }
    
    if (numArg == 3) {
        filePathName = $s3
    } else {
        file = new File()
        file.chooser("r", "Import", "*.*", "Load", "Cancel", getcwd())
        if (!file.chooser()) {
            print "File wasn't selected"
            stop
        }
        
        filePathName = file.getname
    }
    
    // Prepare the temporary folder
    createOrCleanUpTempFolder("Import/temp_folder")
    
    getFileExt(filePathName, fileExt)
    
    if (stringsEqual(fileExt, "hoc") || stringsEqual(fileExt, "HOC")) {
        importHocFile(filePathName, 0)
    } else if (stringsEqual(fileExt, "zip") || stringsEqual(fileExt, "ZIP")) {
        importSwcFileFromZipArchive(filePathName)
    } else {
        importSwcOrOtherFile(filePathName)
    }
}

// Import SWC file from ZIP archive downloaded from NeuroMorpho.org
// $s1 - Input ZIP file path and name
proc importSwcFileFromZipArchive() {
    strdef inZipFilePathName, outFolderPathNameTempl, outFolderPathName, swcFilePathName
    
    inZipFilePathName = $s1
    
    outFolderPathNameTempl = "%sImport/temp_folder/last_unzipped"
    sprint(outFolderPathName, outFolderPathNameTempl, getcwd())
    
    // Prepare the temporary folder
    createOrCleanUpTempFolder("Import/temp_folder/last_unzipped")
    
    // Unzip the archive with 7-Zip and rename the input SWC file
    unzipArchiveWith7ZipAndRenameInputFile(inZipFilePathName, outFolderPathName, swcFilePathName)
    
    importSwcOrOtherFile(swcFilePathName)
}

// Import SWC or any other file supported by NLMorphologyConverter
// $s1 - Input file path and name
proc importSwcOrOtherFile() { local isSomaMissing
    strdef inFilePathName
    
    inFilePathName = $s1
    
    isSomaMissing = checkIfSomaIsMissingInThisGeometryFile(inFilePathName)
    
    if (isSomaMissing) {
        // Ask user to choose the cell type so we can insert soma of proper size
        somaInsertionWidget = new SomaInsertionWidget(inFilePathName)
        somaInsertionWidget.show()
        
        // Unfortunately, we have to exit all the call stack now even though user is still making a choice
        // The "OK" button handler will call "importSwcOrOtherFile_afterChoice"
        return
    }
    
    importSwcOrOtherFile_afterChoice(inFilePathName, -1)
}

// Import HOC file
// $s1 - Input HOC file path and name
// $2 - 0/1 flag indicating whether this proc is called after the file conversion stage
// Other input: isImportForAstro (taken from top level)
proc importHocFile() { local isCalledAfterConversion
    strdef inFilePathName
    
    inFilePathName = $s1
    isCalledAfterConversion = $2
    
    if (isImportForAstro) {
        importHocFileForAstro(inFilePathName, isCalledAfterConversion)
    } else {
        importHocFileNotForAstro(inFilePathName, isCalledAfterConversion)
    }
}

// Import HOC file for Astro
// $s1 - Input HOC file path and name
// $2 - 0/1 flag indicating whether this proc is called after the file conversion stage
proc importHocFileForAstro() { local isCalledAfterConversion, isOldStyleAstroHocFile, needToShowImportedNamesWidget, defaultSomaNameIdx, defaultDendriteNameIdx localobj allNames
    strdef inFilePathName, somaNameInImportedHocFile, dendriteNameInImportedHocFile
    
    inFilePathName = $s1
    isCalledAfterConversion = $2
    
    // Try to load the HOC file with "load_file" and print some clues if failed
    loadHocFile(inFilePathName)
    
    if (!isCalledAfterConversion) {
        isOldStyleAstroHocFile = checkIfThisHocFileIsOfAstroOldStyle(filePathName)
    } else {
        isOldStyleAstroHocFile = 0
    }
    
    if (!isOldStyleAstroHocFile) {
        // Loop by all sections created by the imported HOC file and prepare a list unique names
        allNames = getAllSectionNames()
        
        if (allNames.count() == 0) {
            printImportFailedMsgAndStop("The imported HOC file did not create any section")
        }
        
        if (!isCalledAfterConversion) {
            // Try guess names used for soma and dendrites in the imported HOC file
            // Also, check if user needs to select names from the lists manually (at least to confirm our choice), or the choice is so obvious that we can skip this stage
            needToShowImportedNamesWidget = chooseDefaultSelectionsForSomaAndDendriteNamesForAstro(allNames, &defaultSomaNameIdx, &defaultDendriteNameIdx)
            
            if (needToShowImportedNamesWidget) {
                // Ask user to select names from the lists so we can import proper sections for soma and dendrites
                importedNamesWidget = new ImportedNamesWidget(isCalledAfterConversion, isOldStyleAstroHocFile)
                importedNamesWidget.showForAstro(allNames, defaultSomaNameIdx, defaultDendriteNameIdx)
                
                // Unfortunately, we have to exit all the call stack now even though user is still making a choice
                // The "OK" button handler will call "importHocFileForAstro_afterChoice"
                return
            } else {
                somaNameInImportedHocFile = allNames.o(defaultSomaNameIdx).s
                dendriteNameInImportedHocFile = allNames.o(defaultDendriteNameIdx).s
            }
        } else {
            // Standard names declared by NLMorphologyConverter in the output HOC file
            somaNameInImportedHocFile = "soma"
            dendriteNameInImportedHocFile = "dendrite"
        }
    } else {
        // Standard names used in old-style HOC files (designed for Astro 1.0)
        somaNameInImportedHocFile = "soma"
        dendriteNameInImportedHocFile = "dendrite"
    }
    
    importHocFileForAstro_afterChoice(isCalledAfterConversion, isOldStyleAstroHocFile, somaNameInImportedHocFile, dendriteNameInImportedHocFile)
}

// Import HOC file not for Astro
// $s1 - Input HOC file path and name
// $2 - 0/1 flag indicating whether this proc is called after the file conversion stage
proc importHocFileNotForAstro() { local isCalledAfterConversion, isOldStyleAstroHocFile, needToShowImportedNameWidget, defaultSomaNameIdx localobj allNames
    strdef inFilePathName, somaNameInImportedHocFile
    
    inFilePathName = $s1
    isCalledAfterConversion = $2
    
    if (!isCalledAfterConversion) {
        isOldStyleAstroHocFile = checkIfThisHocFileIsOfAstroOldStyle(inFilePathName)
        if (isOldStyleAstroHocFile) {
            printImportFailedMsgAndStop("Not implemented / Cannot import old-style Astro HOC file while working in non-Astro mode")
        }
    }
    
    // Try to load the HOC file with "load_file" and print some clues if failed
    loadHocFile(inFilePathName)
    
    // Loop by all sections created by the imported HOC file and prepare a list unique names
    allNames = getAllSectionNames()
    
    if (allNames.count() == 0) {
        printImportFailedMsgAndStop("The imported HOC file did not create any section")
    }
    
    if (!isCalledAfterConversion) {
        // Try guess name used for soma in the imported HOC file
        // Also, check if user needs to select name from the list manually (at least to confirm our choice), or the choice is so obvious that we can skip this stage
        needToShowImportedNameWidget = chooseDefaultSelectionForSomaNameNotForAstro(allNames, &defaultSomaNameIdx)
        
        if (needToShowImportedNameWidget) {
            // Ask user to select name from the list so we can import proper sections for soma
            importedNamesWidget = new ImportedNamesWidget(isCalledAfterConversion)
            importedNamesWidget.showNotForAstro(allNames, defaultSomaNameIdx)
            
            // Unfortunately, we have to exit all the call stack now even though user is still making a choice
            // The "OK" button handler will call "importHocFileNotForAstro_afterChoice"
            return
        } else {
            somaNameInImportedHocFile = allNames.o(defaultSomaNameIdx).s
        }
    } else {
        // Standard name declared by NLMorphologyConverter in the output HOC file
        somaNameInImportedHocFile = "soma"
    }
    
    importHocFileNotForAstro_afterChoice(isCalledAfterConversion, somaNameInImportedHocFile)
}
