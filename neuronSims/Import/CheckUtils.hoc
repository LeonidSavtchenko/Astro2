
// Check if this HOC file was designed to be input of Astro 1.0 and so follows the old style
// (i.e. defines OriginalDendrite, NumberDendrites, SeedNumber and reserves extra space in dendrite array)
// $s1 - Input file path and name
// Returns 0/1 flag
func checkIfThisHocFileIsOfAstroOldStyle() { local isOfOldStyle, len localobj inFile
    strdef inFilePathName, inLine
    
    inFilePathName = $s1
    
    // Open input HOC file for reading
    inFile = new File()
    inFile.ropen(inFilePathName)
    
    isOfOldStyle = 0
    
    while (1) {
        len = inFile.gets(inLine)
        if (len == -1) {
            break
        }
        
        if (containsSubstring(inLine, "OriginalDendrite") || containsSubstring(inLine, "NumberDendrites") || containsSubstring(inLine, "SeedNumber")) {
            // Assume the file was designed to be input of the old version of Astro
            isOfOldStyle = 1
            break
        }
    }
    
    inFile.close()
    
    return isOfOldStyle
}

// Check if this geometry file does not define soma
// $s1 - Input file path and name
// Returns 0/1 flag indicating whether soma is missing
func checkIfSomaIsMissingInThisGeometryFile() { local len, idx, numSomas, isSomaMissing localobj inFile, strFunc
    strdef inFilePathName, outFilePathNameTempl, outFilePathName, inLine, numSomasStr
    
    inFilePathName = $s1
    
    // Test the selected file with NLMorphologyConverter
    outFilePathNameTempl = "%sImport/temp_folder/last_report.log"
    sprint(outFilePathName, outFilePathNameTempl, getcwd())
    createReportFileWithNLMorphologyConverter(inFilePathName, outFilePathName)
    
    // Open just created report file for reading
    inFile = new File()
    inFile.ropen(outFilePathName)
    
    // Analyze the report file
    strFunc = new StringFunctions()
    while (1) {
        len = inFile.gets(inLine)
        if (len == -1) {
            printImportFailedMsgAndStop("Cannot analyze the report file created by NLMorphologyConverter")
        }
        idx = strFunc.tail(inLine, "Number of Somas:", numSomasStr)
        if (idx != -1) {
            sscanf(numSomasStr, "%d", &numSomas)
            isSomaMissing = (numSomas == 0)
            break
        }
    }
    
    inFile.close()
    
    return isSomaMissing
}
