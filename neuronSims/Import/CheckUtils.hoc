
// Check if this HOC file needs correction to be compatible with Astro
// $s1 - Input file path and name
// Returns 0/1 flag indicating whether it needs correction
func checkIfThisHocFileNeedsCorrection() { local whetherNeedsCorrection, len localobj inFile
    strdef inFilePathName, inLine
    
    inFilePathName = $s1
    
    // Open input HOC file for reading
    inFile = new File()
    inFile.ropen(inFilePathName)
    
    whetherNeedsCorrection = 1
    
    while (1) {
        len = inFile.gets(inLine)
        if (len == -1) {
            break
        }
        
        if (containsSubstring(inLine, "OriginalDendrite") || containsSubstring(inLine, "NumberDendrites") || containsSubstring(inLine, "SeedNumber")) {
            // Assume the file was designed to be input of Astro
            whetherNeedsCorrection = 0
            break
        }
    }
    
    inFile.close()
    
    return whetherNeedsCorrection
}

// Check if this geometry file does not define soma
// $s1 - Input file path and name
// $2 - 0/1 flag indicating whether to skip the temporary folder clean up stage
// $&3 - (Output) 0/1 flag indicating whether soma is missing
// Returns 0/1 flag indicating success/error
func checkIfSomaIsMissingInThisGeometryFile() { local isNoCleanUpMode, isError, sysComRes, len, idx, numSomas, isSomaMissing localobj inFile, strFunc
    strdef inFilePathName, appPathNameTempl, appPathName, outFilePathNameTempl, outFilePathName, sysCommandTempl, command, inLine, numSomasStr
    
    inFilePathName = $s1
    isNoCleanUpMode = $2
    
    if (!isNoCleanUpMode) {
        // Create the temporary folder if necessary
        isError = createOrCleanUpTempFolder("Import/temp_folder")
        if (isError) {
            return 1
        }
    }
    
    // Test the selected file with NLMorphologyConverter to check if it defines soma
    appPathNameTempl = "%sImport/3rdParty/NLMorphologyConverter/NLMorphologyConverter.exe"
    sprint(appPathName, appPathNameTempl, getcwd())
    outFilePathNameTempl = "%sImport/temp_folder/last_report.log"
    sprint(outFilePathName, outFilePathNameTempl, getcwd())
    sysCommandTempl = "call \"%s\" \"%s\" --report \"%s\""
    sprint(command, sysCommandTempl, appPathName, inFilePathName, outFilePathName)
    sysComRes = system(command)
    if (sysComRes != 0) {
        // Just for sanity. Actually, NLMorphologyConverter does not return error codes, but rather prints a message
        print "Import Failed: Cannot test the file with NLMorphologyConverter"
        return 1
    }
    
    // Open just created report file for reading
    inFile = new File()
    inFile.ropen(outFilePathName)
    
    strFunc = new StringFunctions()
    
    while (1) {
        len = inFile.gets(inLine)
        if (len == -1) {
            isError = 1
            break
        }
        idx = strFunc.tail(inLine, "Number of Somas:", numSomasStr)
        if (idx != -1) {
            sscanf(numSomasStr, "%d", &numSomas)
            isSomaMissing = (numSomas == 0)
            isError = 0
            break
        }
    }
    
    inFile.close()
    
    if (isError) {
        print "Import Failed: Cannot test the file with NLMorphologyConverter"
        return 1
    }
    
    $&3 = isSomaMissing
    
    return 0
}
